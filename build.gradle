apply plugin: "groovy"
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'project-report'
apply plugin: 'application'
apply plugin: 'build-dashboard'
apply from: './properties.gradle'
//apply plugin: 'info.solidsoft.pitest'
description = "java 8 features"

applicationDefaultJvmArgs = ["-Dfile.encoding=UTF=8"]
libsDirName = './target'

sourceCompatibility = 1.8
targetCompatibility = 1.8


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.4'
     
    }
    
}
apply plugin: 'info.solidsoft.pitest'

pitest {
   enableDefaultIncrementalAnalysis = true
    targetClasses = ['pl.java.scalatech.pit*']
    pitestVersion = "1.1.4"
    threads = 8
    outputFormats = ['XML', 'HTML']
    excludedMethods = ['equals', 'hashCode']
    jvmArgs = ['-Xmx2048m']
}




[compileJava, compileTestJava]*.options*.compilerArgs = [
    "-Xlint:none",
    "-g",
    "-encoding",
    "UTF-8"
]

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    maven { url "http://repo.spring.io/libs-release-local/"}
    maven { url "http://repo.spring.io/libs-milestone" }
}

sourceSets {
    intTest
    main {
        java { srcDir 'src/main/java' }
        groovy { srcDir 'src/main/groovy' }
        resources { srcDir 'src/main/resources' }
    }
    test {
        java { srcDir 'src/test/java' }
        groovy { srcDir 'src/test/groovy' }
        resources { srcDir 'src/test/resources' }
    }
}

dependencies {
    compile ("org.codehaus.groovy:groovy:${groovyVersion}")
    compile("org.projectlombok:lombok:${lombokVersion}")
    compile("com.google.guava:guava:${guavaVersion}")    
    compile ("org.springframework:spring-core:${springVersion}")
    compile ("org.springframework:spring-beans:${springVersion}")
    compile ("org.springframework:spring-context:${springVersion}")
    compile("org.slf4j:slf4j-api:$slf4jVersion")
    runtime("ch.qos.logback:logback-classic:$logbackVersion")
    compile("ch.qos.logback:logback-core:$logbackVersion")
    testCompile("org.hamcrest:hamcrest-all:$hamcrestVersion")
    testCompile("org.mockito:mockito-all:$mockitoVersion")
    compile("junit:junit:$junitVersion")
    testCompile("org.easytesting:fest-assert:${festAssertVersion}")
    compile'com.google.code.gson:gson:2.3.1'
    testCompile 'com.carrotsearch:junit-benchmarks:0.7.2'
    testCompile 'org.databene:contiperf:2.3.4'
    testCompile 'org.assertj:assertj-core:3.1.0'
    testCompile 'com.jayway.awaitility:awaitility-java8:1.6.1'
    testCompile 'org.assertj:assertj-core:3.1.0'
    testCompile 'com.jayway.awaitility:awaitility-java8:1.6.1' 
    compile 'org.fusesource.jansi:jansi:1.11'
   
}

//configurations {
//    all*.exclude group: "commons-logging", module: "commons-logging"
//}

configurations {
    all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        exclude group: "commons-logging"
        exclude module: "slf4j-log4j12"
    }
}

jar {
    baseName = 'java8Feature'
    version =  '0.0.1'

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    manifest {
        attributes 'Implementation-Title': 'java8exercise',
        'Implementation-Version': version,
        'Built-By': System.getProperty('user.name'),
        'Built-Date': new Date(),
        'Built-JDK': System.getProperty('java.version'),
        'Built-Gradle': gradle.gradleVersion
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
