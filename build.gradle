import java.lang.annotation.Target;

apply plugin: "groovy"
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'project-report'
apply plugin: 'pmd'
apply plugin: 'application'
apply plugin: 'build-dashboard'
apply plugin: 'codenarc'
apply from: './properties.gradle'


description = "java 8 features"

applicationDefaultJvmArgs = ["-Dfile.encoding=UTF=8"]
libsDirName = './target'

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava]*.options*.compilerArgs = [
    "-Xlint:none",
    "-g",
    "-encoding",
    "UTF-8"
]

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "http://repo.spring.io/libs-release-local/"}
    maven { url "http://repo.spring.io/libs-milestone" }
}

sourceSets {
    intTest
    main {
        java { srcDir 'src/main/java' }
        groovy { srcDir 'src/main/groovy' }
        resources { srcDir 'src/main/resources' }
    }
    test {
        java { srcDir 'src/test/java' }
        groovy { srcDir 'src/test/groovy' }
        resources { srcDir 'src/test/resources' }
    }
}

dependencies {
    compile ("org.codehaus.groovy:groovy:${groovyVersion}")
   
    compile("org.projectlombok:lombok:${lombokVersion}")
    compile("com.google.guava:guava:${guavaVersion}")

    
    compile ("org.springframework:spring-core:${springVersion}")
    compile ("org.springframework:spring-beans:${springVersion}")
    compile ("org.springframework:spring-context:${springVersion}")
  
   
    compile("org.slf4j:slf4j-api:$slf4jVersion")
    compile("org.slf4j:slf4j-ext:$slf4jVersion")
    runtime("ch.qos.logback:logback-classic:$logbackVersion")
    compile("ch.qos.logback:logback-core:$logbackVersion")

    testCompile("org.hamcrest:hamcrest-all:$hamcrestVersion")
    testCompile("org.mockito:mockito-all:$mockitoVersion")
    testCompile("junit:junit:$junitVersion")
    testCompile("org.easytesting:fest-assert:${festAssertVersion}")
    testCompile("com.googlecode.catch-exception:catch-exception:1.2.0")

    
}

//configurations {
//    all*.exclude group: "commons-logging", module: "commons-logging"
//}

configurations {
    all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        exclude group: "commons-logging"
        exclude module: "slf4j-log4j12"
    }
}

jar {
    baseName = 'java8Feature'
    version =  '0.0.1'

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    manifest {
        attributes 'Implementation-Title': 'java8exercise',
        'Implementation-Version': version,
        'Built-By': System.getProperty('user.name'),
        'Built-Date': new Date(),
        'Built-JDK': System.getProperty('java.version'),
        'Built-Gradle': gradle.gradleVersion
    }
}


task wrapper(type: Wrapper) { gradleVersion = '10.1' }

